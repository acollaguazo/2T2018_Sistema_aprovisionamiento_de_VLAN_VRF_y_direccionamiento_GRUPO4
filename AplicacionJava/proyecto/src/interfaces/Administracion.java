/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package interfaces;

import clases.ConectorDB;
import clases.Consulta;
import clases.Direccionamiento;
import clases.PE;
import clases.Registro;
import clases.SSHConnector;
import clases.User;
import com.jcraft.jsch.JSchException;
import java.io.IOException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;

/**
 *
 * @author HOME
 */
public class Administracion extends javax.swing.JFrame {

    ConectorDB conDB;
    User user;
    PE pe;
    SSHConnector sshConnector;
    Consulta consulta;
    ArrayList<Integer> nvlan = new ArrayList<Integer>();

    private int numero_Enlaces_Empresa;
    private int Vlan_Empresa;

    /**
     * Creates new form Administracion
     */
    public Administracion() {
        initComponents();
        inicio();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jComboBox3 = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        jComboBox4 = new javax.swing.JComboBox<>();
        jComboBox5 = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        jRadioButton3 = new javax.swing.JRadioButton();
        jComboBox6 = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        jComboBox7 = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        jComboBox8 = new javax.swing.JComboBox<>();
        jLabel14 = new javax.swing.JLabel();
        jComboBox9 = new javax.swing.JComboBox<>();
        jLabel15 = new javax.swing.JLabel();
        jComboBox10 = new javax.swing.JComboBox<>();
        jLabel16 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();

        jLabel3.setText("jLabel3");

        jLabel6.setText("jLabel6");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("ROUTER");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 30, 70, 29));
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(67, 39, 73, 29));

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setText("CREAR VLAN");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jRadioButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 103, -1, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(240, 240, 240));
        jLabel4.setText("EMPRESA");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(111, 107, 70, -1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(240, 240, 240));
        jLabel5.setText("VLAN");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(111, 182, -1, -1));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(240, 240, 240));
        jLabel7.setText("CIUDAD");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(111, 144, -1, -1));

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione..." }));
        getContentPane().add(jComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(186, 103, -1, -1));
        getContentPane().add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(186, 179, 87, -1));

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(308, 248, 248, 314));

        jButton1.setText("SHOW RUN");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(442, 24, -1, 44));

        jButton2.setText("EJECUTAR");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(387, 160, 85, 37));

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setText("CREAR VRF");
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jRadioButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 248, -1, -1));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(240, 240, 240));
        jLabel8.setText("EMPRESA");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(111, 256, -1, -1));

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(240, 240, 240));
        jLabel9.setText("VLAN");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(111, 340, 44, 27));

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione..." }));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBox2, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 250, -1, 20));

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione..." }));
        getContentPane().add(jComboBox3, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 340, -1, 20));

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(240, 240, 240));
        jLabel10.setText("CIUDAD");
        getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(111, 301, 57, 21));

        jComboBox4.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione..." }));
        jComboBox4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox4ActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBox4, new org.netbeans.lib.awtextra.AbsoluteConstraints(186, 301, -1, -1));

        jComboBox5.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione..." }));
        getContentPane().add(jComboBox5, new org.netbeans.lib.awtextra.AbsoluteConstraints(186, 141, -1, -1));

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(240, 240, 240));
        jLabel11.setText("EMPRESA");
        getContentPane().add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(116, 420, -1, -1));

        buttonGroup1.add(jRadioButton3);
        jRadioButton3.setText("Asignar Enlaces");
        jRadioButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jRadioButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 417, -1, -1));

        jComboBox6.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione..." }));
        jComboBox6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox6ActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBox6, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 410, -1, -1));

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(240, 240, 240));
        jLabel12.setText("CIUDAD");
        getContentPane().add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 450, 50, -1));

        jComboBox7.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione...", " " }));
        jComboBox7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox7ActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBox7, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 450, -1, 20));

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(240, 240, 240));
        jLabel13.setText("VLAN");
        getContentPane().add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(116, 492, -1, -1));

        jComboBox8.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione..." }));
        getContentPane().add(jComboBox8, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 490, -1, -1));

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(240, 240, 240));
        jLabel14.setText("VRF");
        getContentPane().add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(116, 537, 25, -1));

        jComboBox9.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione..." }));
        jComboBox9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox9ActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBox9, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 530, -1, -1));

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(240, 240, 240));
        jLabel15.setText("ROUTER (PE)");
        getContentPane().add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(116, 580, -1, -1));

        jComboBox10.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione..." }));
        getContentPane().add(jComboBox10, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 580, 88, -1));

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(240, 240, 240));
        jLabel16.setText("Enlaces");
        getContentPane().add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(116, 615, -1, 24));

        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });
        getContentPane().add(jTextField2, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 620, 88, -1));

        jLabel17.setIcon(new javax.swing.ImageIcon("C:\\Users\\admin\\Desktop\\Sistema-Aprovisionamiento\\conmutacion\\src\\Imagenes\\data center2.jpg")); // NOI18N
        getContentPane().add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 710));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        //AsignaEmpresaJCombo();
        AsignaCampoJcombo(jComboBox1, "empresa", "razonSocial");
        //AsignarCiudadJCombo();
        AsignaCampoJcombo(jComboBox5, "ciudad", "nombre");
        if (jRadioButton1.isSelected()) {
            jLabel4.setVisible(true);
            jLabel5.setVisible(true);
            jLabel7.setVisible(true);
            jComboBox1.setVisible(true);
            jTextField1.setVisible(true);
            jComboBox5.setVisible(true);
            jLabel8.setVisible(false);
            jLabel9.setVisible(false);
            jLabel10.setVisible(false);
            jComboBox2.setVisible(false);
            jComboBox3.setVisible(false);
            jComboBox4.setVisible(false);
            jLabel11.setVisible(false);
            jLabel12.setVisible(false);
            jLabel13.setVisible(false);
            jLabel14.setVisible(false);
            jLabel15.setVisible(false);
            jLabel16.setVisible(false);
            jComboBox6.setVisible(false);
            jComboBox7.setVisible(false);
            jComboBox8.setVisible(false);
            jComboBox9.setVisible(false);
            jComboBox10.setVisible(false);
            jTextField2.setVisible(false);
        }
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            sshConnector.connect(user, pe, 22);
            String result = sshConnector.executeCommand("show run\n       ");
            jTextArea1.setText(result);
            sshConnector.disconnect();
        } catch (IllegalAccessException ex) {
            Logger.getLogger(Administracion.class.getName()).log(Level.SEVERE, null, ex);
        } catch (JSchException ex) {
            Logger.getLogger(Administracion.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Administracion.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        AsignaCampoJcombo(jComboBox2, "empresa", "razonSocial");
        AsignaCampoJcombo(jComboBox4, "ciudad", "nombre");
        if (jRadioButton2.isSelected()) {
            jLabel4.setVisible(false);
            jLabel5.setVisible(false);
            jLabel7.setVisible(false);
            jComboBox1.setVisible(false);
            jTextField1.setVisible(false);
            jComboBox5.setVisible(false);
            jLabel8.setVisible(true);
            jLabel9.setVisible(true);
            jLabel10.setVisible(true);
            jComboBox2.setVisible(true);
            jComboBox3.setVisible(true);
            jComboBox4.setVisible(true);
            jLabel11.setVisible(false);
            jLabel12.setVisible(false);
            jLabel13.setVisible(false);
            jLabel14.setVisible(false);
            jLabel15.setVisible(false);
            jLabel16.setVisible(false);
            jComboBox6.setVisible(false);
            jComboBox7.setVisible(false);
            jComboBox8.setVisible(false);
            jComboBox9.setVisible(false);
            jComboBox10.setVisible(false);
            jTextField2.setVisible(false);
        }
    }//GEN-LAST:event_jRadioButton2ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        //la opcion de crear vlan
        if (jRadioButton1.isSelected()) {
            //valida si los campos son correctamente llenados y seleccionados
            if (!(jComboBox1.getSelectedItem().toString().equals("Seleccione...")) && !(jTextField1.getText().equals("")) && !(jComboBox5.getSelectedItem().toString().equals("Seleccione..."))) {
                //verifica si la vlan es un numero
                if (isNumeric(jTextField1.getText())) {
                    //verifica si la vlan es un numero entre 1-4096
                    if ((Integer.parseInt(jTextField1.getText()) >= 1) && (Integer.parseInt(jTextField1.getText()) <= 4096)) {

                        switch (existeVlanCiudad()) {

                            case 0:
                                JOptionPane.showMessageDialog(null, "no hay vlan disponibles en la ciudad" + jComboBox5.getSelectedItem().toString());
                                break;
                            case -1:
                                if (!poseeVLANempresa()) {
//                                    
                                    registrarvlanBD_R(Integer.parseInt(jTextField1.getText()), jComboBox5.getSelectedItem().toString(), jComboBox1.getSelectedItem().toString(), -1);

                                } else {

                                    int closeSelected = JOptionPane.showConfirmDialog(null, "¿desea que se cree otra vlan para la empresa?", "Alerta", JOptionPane.YES_NO_OPTION);
                                    if (closeSelected == JOptionPane.YES_OPTION) {
                                        registrarvlanBD_R(Integer.parseInt(jTextField1.getText()), jComboBox5.getSelectedItem().toString(), jComboBox1.getSelectedItem().toString(), -1);
                                    } else {
                                        System.out.println("NO SE CREO VLAN");
                                    }

                                }

                                break;
                            case 1://existe vlan dentro de la ciudad
                                System.out.println("vlan existe se asignara otra");
                                JOptionPane.showMessageDialog(null, "VLAN " + jTextField1.getText() + " existe");
                                if (!poseeVLANempresa()) {
                                    for (int i = 1; i <= 4096; i++) {
                                        for (int v : nvlan) {
                                            if (i != v) {
                                                registrarvlanBD_R(i, jComboBox5.getSelectedItem().toString(), jComboBox1.getSelectedItem().toString(), 1);

                                                i = 4097;
                                                break;
                                            }

                                        }

                                    }

                                } else {
                                    System.out.println("la vlan existe y la empresa tiene una vlan quiere otra");
                                    JOptionPane.showMessageDialog(null, "VLAN " + jTextField1.getText() + " existe");
                                    for (int i = 1; i <= 4096; i++) {
                                        for (int v : nvlan) {
                                            if (i != v) {
                                                int closeSelected = JOptionPane.showConfirmDialog(null, "¿desea que se cree otra vlan para la empresa?", "Alerta", JOptionPane.YES_NO_OPTION);
                                                if (closeSelected == JOptionPane.YES_OPTION) {
                                                    registrarvlanBD_R(Integer.parseInt(jTextField1.getText()), jComboBox5.getSelectedItem().toString(), jComboBox1.getSelectedItem().toString(), 1);
                                                } else {
                                                    System.out.println("NO SE CREO VLAN");
                                                }
                                                i = 4097;
                                                break;
                                            }

                                        }

                                    }

                                }

                                break;
                            default:
                                break;

                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "El número de VLAN debe de ser entre 1 a 4096 vuelva a intentarlo.");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "El número de VLAN debe de ser entre 1 a 4096 vuelva a intentarlo.");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Campos incompletos, vuelva a intentar.");
            }
        } else if (jRadioButton2.isSelected()) {
            if (!(jComboBox2.getSelectedItem().toString().equals("seleccione...")) && !(jComboBox3.getSelectedItem().toString().equals("seleccione...")) && !(jComboBox4.getSelectedItem().toString().equals("seleccione..."))) {
                String nombreVRF = obtenerVRF(jComboBox9, jComboBox2);
                if (nombreVRF.equals("no_existe")) {
                    registrarvrfBD_R(Integer.parseInt(jComboBox3.getSelectedItem().toString()), jComboBox2.getSelectedItem().toString(), jComboBox4.getSelectedItem().toString());
                } else {
                    JOptionPane.showMessageDialog(null, "existe VRF" + nombreVRF + "PARA la empresa " + jComboBox2.getSelectedItem().toString() + " seleccionada");
                }

            } else {
                JOptionPane.showMessageDialog(null, "Falta información, inténtelo de nuevo");
            }

        } else if (jRadioButton3.isSelected()) {

            if (!(jComboBox6.getSelectedItem().toString().equals("Seleccione...")) && !(jComboBox7.getSelectedItem().toString().equals("Seleccione...")) && !(jComboBox8.getSelectedItem().toString().equals("Seleccione...")) && !(jComboBox9.getSelectedItem().toString().equals("Seleccione...")) && !(jComboBox10.getSelectedItem().toString().equals("Seleccione...")) && !(jTextField2.getText().equals(""))) {
                String empresa = jComboBox6.getSelectedItem().toString();
                String ciudad = jComboBox7.getSelectedItem().toString();
                int vlan = Integer.parseInt(jComboBox8.getSelectedItem().toString());
                String vrf = jComboBox9.getSelectedItem().toString();
                String router = jComboBox10.getSelectedItem().toString();
                int noEnlace = 0;
                try {

                    String enlace = asignarEnlace();
                    System.out.println(enlace);
                    if (enlace.equals("")) {
                        JOptionPane.showMessageDialog(null, "No se asigno direccionamiento");
                    } else {
                        String[] a = enlace.split(",");
                        String ip = "";
                        noEnlace = Integer.parseInt(a[2]);
                        char[] w = a[0].toCharArray();
                        int cont = 0;
                        String ultimobit = "";
                        for (char x : w) {
                            if (cont == 3) {
                                ultimobit = ultimobit + x;
                            } else {
                                ip = ip + x;
                            }
                            if (x == '.') {
                                cont++;
                            }
                            
                            
                        }
                        ip = ip + Integer.toString((Integer.parseInt(ultimobit) + 1));
                        System.out.println(ip);

                        PE PE_SSH = null;

                        sshConnector = new SSHConnector();
                        for (PE pe : Inicio.pes) {

                            if (ciudad.equals(pe.getCiudad())) {
                                PE_SSH = new PE(pe.getNombre(), pe.getCiudad(), pe.getDireccionIP());
                                break;
                            }
                        }
                        sshConnector = new SSHConnector();
                        sshConnector.connect(user, PE_SSH, 22);
                        String result = sshConnector.executeCommand("config t\ninterface f1/0." + vlan + "\nip address " + ip + " " + a[1] + "\n");
                        jTextArea1.setText(result);
                        sshConnector.disconnect();

                        conDB = new ConectorDB();
                        Connection reg = conDB.getConnection();
                        Registro r = new Registro();
                        if(a.length<4){
                            r.registrarDireccionamiento(reg, a[0], a[1], empresa, ciudad, vlan, vrf, PE_SSH.getNombre(), noEnlace);
                        }
                        else{
                            if(a[3].equals("agregoensubred")){
                                r.modificartabla(reg, "direccionamiento", "dir_red", a[0], "enlaces", a[2]);
                            }
                        }
                        
                        reg.close();
                        conDB.desconectar();

                    }

                    asignarEnlace();
                } catch (JSchException ex) {
                    JOptionPane.showMessageDialog(null, "Falla en la conexión con el dispositivo PE, inténtelo más tarde");
                    Logger.getLogger(Administracion.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IllegalAccessException ex) {
                    Logger.getLogger(Administracion.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(Administracion.class.getName()).log(Level.SEVERE, null, ex);
                } catch (Exception e) {
                    System.out.println("ERROR");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Falta información, inténtelo de nuevo");
            }

        } else {
            System.out.println("DEBE SELECCIONAR ALGO");
        }
        for (int z : nvlan) {
            System.out.println(z);
        }
        nvlan.clear();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void jComboBox4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox4ActionPerformed
        if (jComboBox2.getSelectedItem().toString().equals("Seleccione...")) {
            JOptionPane.showMessageDialog(null, "Primero seleccione empresa");
        } else {
            asignandoVLANComboBox(jComboBox3, jComboBox2, jComboBox4);
        }
    }//GEN-LAST:event_jComboBox4ActionPerformed

    private void jRadioButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton3ActionPerformed

        AsignaCampoJcombo(jComboBox6, "empresa", "razonSocial");

        AsignaCampoJcombo(jComboBox7, "ciudad", "nombre");
        AsignaCampoJcombo(jComboBox10, "providerEdge", "nombrePE");
        if (jRadioButton3.isSelected()) {
            jLabel11.setVisible(true);
            jLabel12.setVisible(true);
            jLabel13.setVisible(true);
            jLabel14.setVisible(true);
            jLabel15.setVisible(true);
            jLabel16.setVisible(true);
            jComboBox6.setVisible(true);
            jComboBox7.setVisible(true);
            jComboBox8.setVisible(true);
            jComboBox9.setVisible(true);
            jComboBox10.setVisible(true);
            jTextField2.setVisible(true);
            jLabel4.setVisible(false);
            jLabel5.setVisible(false);
            jLabel7.setVisible(false);
            jLabel8.setVisible(false);
            jLabel9.setVisible(false);
            jLabel10.setVisible(false);
            jComboBox1.setVisible(false);
            jComboBox2.setVisible(false);
            jComboBox3.setVisible(false);
            jComboBox4.setVisible(false);
            jTextField1.setVisible(false);
            jComboBox5.setVisible(false);

        }
    }//GEN-LAST:event_jRadioButton3ActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jComboBox7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox7ActionPerformed
        if (jComboBox6.getSelectedItem().toString().equals("Seleccione...")) {
            JOptionPane.showMessageDialog(null, "Primero seleccione empresa");
        } else {
            asignandoVLANComboBox(jComboBox8, jComboBox6, jComboBox7);
            seleccionarPE(jComboBox7.getSelectedItem().toString(), jComboBox10);

        }
    }//GEN-LAST:event_jComboBox7ActionPerformed

    private void jComboBox9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox9ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox9ActionPerformed

    private void jComboBox6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox6ActionPerformed
        String z = obtenerVRF(jComboBox9, jComboBox6);
    }//GEN-LAST:event_jComboBox6ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Administracion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Administracion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Administracion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Administracion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Administracion().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox10;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JComboBox<String> jComboBox4;
    private javax.swing.JComboBox<String> jComboBox5;
    private javax.swing.JComboBox<String> jComboBox6;
    private javax.swing.JComboBox<String> jComboBox7;
    private javax.swing.JComboBox<String> jComboBox8;
    private javax.swing.JComboBox<String> jComboBox9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables

    public void setPE(PE pe) {
        this.pe = pe;
    }

    public void setUser(User user) {
        this.user = user;
    }

    public void setConectorDB(ConectorDB con) {
        this.conDB = con;
    }

    public void setSSHConector(SSHConnector sshConnector) {
        this.sshConnector = sshConnector;
    }

    public void setjLabelRouter(String nameR) {
        jLabel2.setText(nameR);
    }

    public void inicio() {

        jLabel4.setVisible(false);
        jLabel5.setVisible(false);
        jLabel7.setVisible(false);
        jLabel8.setVisible(false);
        jLabel9.setVisible(false);
        jLabel10.setVisible(false);
        jComboBox1.setVisible(false);
        jComboBox2.setVisible(false);
        jComboBox3.setVisible(false);
        jComboBox4.setVisible(false);
        jTextField1.setVisible(false);
        jComboBox5.setVisible(false);

        jLabel11.setVisible(false);
        jLabel12.setVisible(false);
        jLabel13.setVisible(false);
        jLabel14.setVisible(false);
        jLabel15.setVisible(false);
        jLabel16.setVisible(false);
        jComboBox6.setVisible(false);
        jComboBox7.setVisible(false);
        jComboBox8.setVisible(false);
        jComboBox9.setVisible(false);
        jComboBox10.setVisible(false);
        jTextField2.setVisible(false);

    }

    public void AsignaCampoJcombo(JComboBox jCombo, String nombreTabla, String nombreCampo) {
        jCombo.removeAllItems();
        jCombo.addItem("Seleccione...");
        try {
            conDB = new ConectorDB();
            Connection reg = conDB.getConnection();
            consulta = new Consulta();
            ResultSet rs = consulta.getResultSetTabla(reg, nombreTabla);
            if (rs != null) {
                while (rs.next()) {
                    jCombo.addItem(rs.getString(nombreCampo));
                }
            } else {
                System.out.println("ERROR");
            }
            rs.close();
            reg.close();
            conDB.desconectar();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static boolean isNumeric(String cadena) {

        boolean resultado;

        try {
            Integer.parseInt(cadena);
            resultado = true;
        } catch (NumberFormatException excepcion) {
            resultado = false;
        }

        return resultado;
    }

    public int existeVlanCiudad() {
        int cont = 0;
        int op = -1;
        try {
            conDB = new ConectorDB();
            Connection reg = conDB.getConnection();
            consulta = new Consulta();
            ResultSet rs = consulta.getResultSetTabla(reg, "vlan");
            if (rs != null) {
                while (rs.next()) {
                    if (jComboBox5.getSelectedItem().toString().equals(rs.getString("ciudad"))) {
                        nvlan.add(rs.getInt("N_vlan"));
                        cont++;//contador de vlan dentro de la ciudad
                        if (jTextField1.getText().equals(rs.getString("N_vlan"))) {
                            op = 1;//da un valor de 1 si esta el numero vlan dentro de la ciudad
                        }

                    }
                }
            } else {
                System.out.println("rsvacio");

            }
            rs.close();
            reg.close();
            conDB.desconectar();
        } catch (Exception e) {
            e.printStackTrace();
        }
        if (cont == 4096) {
            op = 0;//si el contador de vlans es 4096 entonces cambia op a pesar de que haya  un numero de vlan
        }           //  corrige el error en que existe vlan y haya 4096 vlans 
        Collections.sort(nvlan);
        return op;//retorna valor -1 cuando no existe vlan en ciudad
    }

    public boolean poseeVLANempresa() {
        try {
            conDB = new ConectorDB();
            Connection reg = conDB.getConnection();
            consulta = new Consulta();
            ResultSet rs = consulta.getResultSetTabla(reg, "vlan");
            if (rs != null) {
                while (rs.next()) {
                    if (jComboBox5.getSelectedItem().toString().equals(rs.getString("ciudad"))
                            && jComboBox1.getSelectedItem().toString().equals(rs.getString("empresa"))) {
                        rs.close();
                        reg.close();
                        conDB.desconectar();
                        return true;
                    }
                }
            } else {
                System.out.println("rsvacio");

            }
            rs.close();
            reg.close();
            conDB.desconectar();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return false;
    }

    public void asignandoVLANComboBox(JComboBox jComboVLAN, JComboBox jComboEmpresa, JComboBox jComboCiudad) {
        jComboVLAN.removeAllItems();
        jComboVLAN.addItem("Seleccione...");

        try {
            conDB = new ConectorDB();
            Connection reg = conDB.getConnection();
            consulta = new Consulta();
            ResultSet rs = consulta.getResultSetTabla(reg, "vlan");
            if (rs != null) {
                while (rs.next()) {
                    if ((jComboEmpresa.getSelectedItem().toString().equals(rs.getString("empresa"))) && (jComboCiudad.getSelectedItem().toString().equals(rs.getString("ciudad")))) {
                        jComboVLAN.addItem(rs.getString("N_vlan"));

                    }

                }
            } else {
                System.out.println("ERROR");
            }
            rs.close();
            reg.close();
            conDB.desconectar();
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    public void registrarvlanBD_R(int vlan, String ciudad, String empresa, int option) {
        try {
            conDB = new ConectorDB();
            Connection reg = conDB.getConnection();
            Registro r = new Registro();
            r.registrarVLAN(reg, vlan, ciudad, empresa);
            reg.close();
            conDB.desconectar();

            try {
                PE PE_SSH = null;

                sshConnector = new SSHConnector();
                for (PE pe : Inicio.pes) {

                    if (ciudad.equals(pe.getCiudad())) {
                        PE_SSH = new PE(pe.getNombre(), pe.getCiudad(), pe.getDireccionIP());
                        break;
                    }
                }
                System.out.println(PE_SSH.toString());
                sshConnector.connect(user, PE_SSH, 22);

                String result = sshConnector.executeCommand("conf t\n" + "int f0/0." + vlan + "\n" + "encapsulation dot1q " + vlan + "\n" + "description VLAN-DE-EMPRESA-" + empresa + "\n" + "do wr \n\n");
                jTextArea1.setText(result);
                sshConnector.disconnect();
                if (option == -1) {
                    JOptionPane.showMessageDialog(null, "VLAN " + vlan + " creada exitosamente en la ciudad " + ciudad + " para la empresa " + empresa);
                } else if (option == 1) {
                    JOptionPane.showMessageDialog(null, "Se asigno una VLAN nueva " + vlan + " en la ciudad " + ciudad + " para la empresa " + empresa);
                }
            } catch (JSchException e) {
                e.printStackTrace();
            } catch (IllegalAccessException ex) {
                Logger.getLogger(Administracion.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Administracion.class.getName()).log(Level.SEVERE, null, ex);
            }

        } catch (SQLException ex) {
            Logger.getLogger(Administracion.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void registrarvrfBD_R(int vlan, String empresa, String ciudad) {
        conDB = new ConectorDB();
        Connection reg = conDB.getConnection();
        Registro r = new Registro();
        String nombreVRF = "VRF_" + empresa + "_" + vlan + "";
        System.out.println(nombreVRF);
        r.registrarVRF(reg, nombreVRF, vlan, ciudad, empresa);

        try {
            PE PE_SSH = null;

            sshConnector = new SSHConnector();
            for (PE pe : Inicio.pes) {

                if (ciudad.equals(pe.getCiudad())) {
                    PE_SSH = new PE(pe.getNombre(), pe.getCiudad(), pe.getDireccionIP());
                    break;
                }
            }
            System.out.println(PE_SSH.toString());
            sshConnector.connect(user, PE_SSH, 22);
            String result = sshConnector.executeCommand("config t\nip vrf " + nombreVRF + "\nrd 1:" + vlan + "\nroute-target export 1:" + vlan + "\nroute-target import 1:" + vlan + "\nint f0/0." + vlan + "\nip vrf forwarding " + nombreVRF + "\ndo wr\n" + "" + "\ndo wr\n\n ");
            jTextArea1.setText(result);
            sshConnector.disconnect();
            JOptionPane.showMessageDialog(null, "se creo" + nombreVRF + " para la empresa " + empresa + " con vlan " + vlan);
        } catch (JSchException e) {
            e.printStackTrace();
        } catch (IllegalAccessException ex) {
            Logger.getLogger(Administracion.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Administracion.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public String obtenerVRF(JComboBox jComboVRF, JComboBox jComboEmpresa) {
        jComboVRF.removeAllItems();
        jComboVRF.addItem("Seleccione...");

        String nombreVRF = "no_existe";
        try {
            conDB = new ConectorDB();

            Connection reg = conDB.getConnection();

            consulta = new Consulta();

            ResultSet rs = consulta.getResultSetTabla(reg, "VRF");

            if (rs != null) {

                while (rs.next()) {

                    if (jComboEmpresa.getSelectedItem().toString().equals(rs.getString("empresa"))) {
                        nombreVRF = rs.getString("nombreVRF");
                        jComboVRF.addItem(rs.getString("nombreVRF"));
                        break;
                    }
                }
            } else {
                System.out.println("rsvacio");

            }
            rs.close();
            reg.close();
            conDB.desconectar();
        } catch (Exception e) {
            System.out.println("abc");
            e.printStackTrace();
        }
        return nombreVRF;
    }

    public String asignarEnlace() {
        Direccionamiento dir = null;
        int numero_Enlaces_Existentes = 0;
        String lineassh = "";
        String mensaje_de_aceptacion = "no";
        try {
            conDB = new ConectorDB();
            Connection reg = conDB.getConnection();
            consulta = new Consulta();
            ResultSet rs = consulta.getResultSetTabla(reg, "direccionamiento");

            if (rs != null) {
                while (rs.next()) {
                    if (jComboBox6.getSelectedItem().toString().equals(rs.getString("empresa"))) {
                        dir = new Direccionamiento(rs.getString("dir_red"), rs.getString("submask_red"), rs.getString("empresa"), rs.getString("ciudad"), rs.getInt("vlan"), rs.getString("nombreVRF"), rs.getString("nombrePE"), rs.getInt("enlaces"));
                        break;
                    }
                }

            } else {
                System.out.println("ERROR");
            }
            rs.close();
            reg.close();
            conDB.desconectar();

            if (dir == null) {
                mensaje_de_aceptacion = "no";
            } else {
                mensaje_de_aceptacion = "si";
                numero_Enlaces_Existentes = dir.getEnlaces();
            }

            //La mascara del ISP puede ser 191.128.0.0/12
            //obtencion de los 3 primeros octetos de la subred
            numero_Enlaces_Empresa = Integer.parseInt(jTextField2.getText());
            Vlan_Empresa = Integer.parseInt(jComboBox8.getSelectedItem().toString());

            ArrayList<Integer> lista_binario_vlan = new ArrayList<Integer>();
            //funcion devuelve un arreglo de la vlan en binario
            lista_binario_vlan = binario_list(Vlan_Empresa, 13);
            int primer_octeto = 10;
            int segundo_octeto = lista_binario_vlan.get(0) + 2 * lista_binario_vlan.get(1) + 4 * lista_binario_vlan.get(2) + 8 * lista_binario_vlan.get(3) + 16 * lista_binario_vlan.get(4);
            int tercer_octeto = 128 * lista_binario_vlan.get(5) + 64 * lista_binario_vlan.get(6) + 32 * lista_binario_vlan.get(7) + 16 * lista_binario_vlan.get(8)
                    + 8 * lista_binario_vlan.get(9) + 4 * lista_binario_vlan.get(10) + 2 * lista_binario_vlan.get(11) + lista_binario_vlan.get(12);
            int cuarto_octeto = 0;

            //Mascara para la subred
            int primero_mascara = 255, segundo_mascara = 255, tercero_mascara = 255;
            int cuarto_mascara = 255;

            //int numero_Enlaces_Existentes = dir.getEnlaces();//Valor sacado de la base de datos
            for (int i = 1; i < 9; i++) {
                if ((numero_Enlaces_Existentes + 2) < Math.pow(2, i)) {
                    cuarto_mascara = 256 - (int) Math.pow(2, i);
                    i = 9;
                }
            }
            System.out.println(cuarto_mascara);
            int cuarto_mascara_temporal = cuarto_mascara;
            for (int i = 1; i < 9; i++) {
                if ((numero_Enlaces_Empresa + 2 + numero_Enlaces_Existentes) < Math.pow(2, i)) {
                    cuarto_mascara_temporal = 256 - (int) Math.pow(2, i);
                    i = 9;
                }
            }
            System.out.println(cuarto_mascara_temporal);
            cuarto_mascara = cuarto_mascara_temporal;
            int nuevo_numero_de_enlaces = numero_Enlaces_Empresa + numero_Enlaces_Existentes;
            System.out.println("");
            if ((nuevo_numero_de_enlaces + 2) > 256) {
                System.out.println("Excede el numero de enlaces disponibles en el ISP");
                return "";
            } else {
                if (cuarto_mascara_temporal == cuarto_mascara) {
                    if (mensaje_de_aceptacion.equals("si")) {
                        cuarto_mascara = cuarto_mascara_temporal;
                        System.out.println("se agrego mas enlaces dentro de la misma subred");
                        return primer_octeto + "." + segundo_octeto + "." + tercer_octeto + "." + cuarto_octeto
                                + "," + primero_mascara + "." + segundo_mascara + "." + tercero_mascara + "."
                                + cuarto_mascara + "," + nuevo_numero_de_enlaces+","+"agregoensubred";
                    }
                    else{
                        cuarto_mascara = cuarto_mascara_temporal;
                        System.out.println("se agrego una nueva subred diferente no existente a la base de datos");
                        return primer_octeto + "." + segundo_octeto + "." + tercer_octeto + "." + cuarto_octeto
                                + "," + primero_mascara + "." + segundo_mascara + "." + tercero_mascara + "."
                                + cuarto_mascara + "," + nuevo_numero_de_enlaces;
                    }

                } else {

                    if (mensaje_de_aceptacion.equals("si")) {
                        cuarto_mascara = cuarto_mascara_temporal;
                        int closeSelected = JOptionPane.showConfirmDialog(null, "¿Desea asignar un nueva\n subred Si/No?", "Alerta", JOptionPane.YES_NO_OPTION);
                        if (closeSelected == JOptionPane.YES_OPTION) {
                            System.out.println("se cambio la mascara cuando habia enlaces anteriores");
                            return primer_octeto + "." + segundo_octeto + "." + tercer_octeto + "." + cuarto_octeto
                                    + "," + primero_mascara + "." + segundo_mascara + "." + tercero_mascara + "."
                                    + cuarto_mascara + "," + nuevo_numero_de_enlaces+","+"cambiodemascara";
                        } else {
                            return "";
                        }
                    } else {
                        System.out.println("");
                        return primer_octeto + "." + segundo_octeto + "." + tercer_octeto + "." + cuarto_octeto
                                + "," + primero_mascara + "." + segundo_mascara + "." + tercero_mascara + "."
                                + cuarto_mascara + "," + nuevo_numero_de_enlaces;
                    }
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        return lineassh;
    }

    public void seleccionarPE(String ciudad, JComboBox jComboPE) {
        if (ciudad.equals("UIO")) {
            jComboPE.setSelectedItem("PE1-UIO");
        } else if (ciudad.equals("ISP")) {

        }
    }

    private ArrayList<Integer> binario_list(int Vlan_Empresa, int cant_bits) {
        int aux_vlan = Vlan_Empresa;
        ArrayList<Integer> binario_vlan = new ArrayList<Integer>();
        ArrayList<Integer> devolver = new ArrayList<Integer>();
        int verificador;
        for (int i = 0; i < cant_bits; i++) {
            verificador = aux_vlan % 2;
            aux_vlan = aux_vlan / 2;
            if (verificador == 1) {
                binario_vlan.add(1);
            } else {
                binario_vlan.add(0);
            }
        }
        for (int i = 0; i < cant_bits; i++) {
            devolver.add(binario_vlan.get(cant_bits - 1 - i));
        }
        return devolver;
    }
}
